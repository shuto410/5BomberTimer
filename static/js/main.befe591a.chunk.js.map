{"version":3,"sources":["components/Time.tsx","components/Timer.tsx","components/SoundPlayer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Time","props","Typography","align","color","isResetState","variant","seconds","m","Math","floor","s","mStr","toString","sStr","secondsToString","useStyles","makeStyles","redBg","background","whiteBg","Timer","classes","useState","initialSeconds","setInitialSeconds","remainingSeconds","setRemainingSeconds","refRemainingSeconds","useRef","timerId","setTimerId","running","setRunning","startButton","name","stopButton","actionButton","setActionButton","resetButtonIsEnable","setResetButtonIsEnable","setIsResetState","useEffect","current","window","clearInterval","startTimer","setInterval","updateTimer","stopTimer","Grid","container","justify","spacing","item","xs","md","Paper","className","elevation","Box","ml","mt","IconButton","edge","onClick","mr","Button","size","startIcon","disabled","SoundPlayer","React","Audio","correctSound","wrongSound","document","body","addEventListener","event","key","play","app","padding","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.befe591a.chunk.js","sourcesContent":["import React from 'react';\nimport { Paper, Typography } from '@material-ui/core'\nimport 'fontsource-roboto'\n\ntype TimeProps = {\n  seconds: number;    \n  isResetState: boolean;\n}\nconst Time: React.FC<TimeProps> = (props) => {\n  const secondsToString = (seconds: number): string => {\n    const m: number = Math.floor(seconds / 60);\n    const s: number = seconds % 60;\n    let mStr: string = m.toString();\n    let sStr: string = s.toString();\n    if (m < 10) mStr = '0' + mStr;\n    if (s < 10) sStr = '0' + sStr;\n    return mStr + ':' + sStr;\n  }\n\n  return (\n      <Typography align=\"center\" color={props.isResetState ? \"secondary\":\"primary\"} variant=\"h1\">\n        { secondsToString(props.seconds) }\n      </Typography>\n  );\n\n}\n\nexport default Time;","import React, { useState, useEffect, useRef } from 'react';\nimport { Button, Grid, IconButton, Paper, Box, makeStyles } from '@material-ui/core'\nimport AddIcon from '@material-ui/icons/Add';\nimport RemoveIcon from '@material-ui/icons/Remove';\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\nimport StopIcon from '@material-ui/icons/Stop';\nimport PauseIcon from '@material-ui/icons/Pause';\nimport 'fontsource-roboto'\nimport Time from './Time';\n\nconst useStyles = makeStyles({\n  redBg: {\n    background: 'red',\n  },\n  whiteBg: {\n  },\n})\n\n\nconst Timer: React.FC = () => {\n  const classes = useStyles();\n  const [initialSeconds, setInitialSeconds] = useState(90)\n  const [remainingSeconds, setRemainingSeconds] = useState(initialSeconds);\n  const refRemainingSeconds = useRef(remainingSeconds);\n  const [timerId, setTimerId] = useState(0);\n  const [running, setRunning] = useState(false);\n  const startButton = {color: 'primary', name: 'start'} as const;\n  const stopButton = {color: 'default', name: 'stop'} as const;\n  type ActionButton = typeof stopButton | typeof startButton;\n  const [actionButton, setActionButton] = useState<ActionButton>({color: 'primary', name: 'start'})\n  const [resetButtonIsEnable, setResetButtonIsEnable] = useState(true);\n  const [isResetState, setIsResetState] = useState(true);\n\n  useEffect(() => {\n    refRemainingSeconds.current = remainingSeconds;\n    if (remainingSeconds === 0) {\n      window.clearInterval(timerId);\n    }\n  }, [remainingSeconds]);\n\n  const onActionButton = () => {\n    if (running) {\n      stopTimer();\n      setRunning(false);\n      setActionButton(startButton);\n      setResetButtonIsEnable(true);\n    }\n    else { \n      startTimer();\n      setRunning(true);\n      setActionButton(stopButton);\n      setResetButtonIsEnable(false);\n      setIsResetState(false);\n    }\n  }\n\n  const startTimer = () => {\n    setTimerId(window.setInterval(updateTimer, 1000));\n  }\n\n  const stopTimer = () => {\n    window.clearInterval(timerId);\n  }\n\n  const updateTimer = () => {\n    if (refRemainingSeconds.current > 0) {\n      setRemainingSeconds(refRemainingSeconds.current - 1);\n    }\n  }\n\n  const resetTimer = () => {\n    setRemainingSeconds(initialSeconds);\n    window.clearInterval(timerId);\n    setIsResetState(true);\n  }\n\n  const increaseTime = () => {\n    if (isResetState) {\n      if (initialSeconds > 3570) {\n        setInitialSeconds(3599);\n      }\n      else {\n        setInitialSeconds(initialSeconds + 30);\n      }\n    }\n    if (remainingSeconds > 3570) {\n      setRemainingSeconds(3599);\n      return;\n    }\n    setRemainingSeconds(remainingSeconds + 30);\n  }\n\n  const decreaseTime = () => {\n    if (isResetState) {\n      if (initialSeconds < 30) {\n        setInitialSeconds(0);\n      }\n      else {\n        setInitialSeconds(initialSeconds - 30)\n      }\n    }\n    if (remainingSeconds < 30) {\n      setRemainingSeconds(0);\n      return;\n    }\n    setRemainingSeconds(remainingSeconds - 30);\n  }\n\n  return (\n    <Grid container justify=\"center\" spacing={2}>\n      <Grid item xs md={5}>\n        <Paper className={remainingSeconds === 0 ? classes.redBg : classes.whiteBg} color=\"primary\" elevation={4}>\n          <Grid container>\n          <Grid item xs={11}>\n            <Box ml=\"5vw\"><Time seconds={remainingSeconds} isResetState={isResetState}/ ></Box>\n          </Grid>\n          <Grid item xs={1}>\n            <Grid container>\n            <Grid item xs={12}>\n              <Box mt={1}><IconButton color={isResetState ? \"secondary\":\"primary\"} edge='start' onClick={() => {increaseTime()}}><AddIcon></AddIcon></IconButton></Box>\n            </Grid>\n            <Grid item xs={12}>\n              <IconButton color={isResetState ? \"secondary\":\"primary\"} edge='start' onClick={() => {decreaseTime()}}><RemoveIcon></RemoveIcon></IconButton>\n            </Grid>\n            </Grid>\n          </Grid>\n          </Grid>\n        </Paper>\n      </Grid>\n      <Grid item xs={12}>\n        <Grid container justify=\"center\" spacing={2}>\n          <Box mr=\"1vw\" mt=\"3vh\">\n            <Button size=\"large\" variant=\"contained\" color={actionButton.color} startIcon={running ? <PauseIcon/>:<PlayArrowIcon/>} onClick={() => {onActionButton()}}>{actionButton.name}</Button>\n          </Box>\n          <Box ml=\"1vw\" mt=\"3vh\">\n            <Button size=\"large\" variant=\"contained\" color=\"secondary\" startIcon={<StopIcon/>} disabled={resetButtonIsEnable ? false : true} onClick={() => {resetTimer()}}>Reset</Button>\n          </Box>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n\n}\n\nexport default Timer;","import React, { useState, useEffect, useRef } from 'react';\nimport { Button, Grid, IconButton, Paper, Box, makeStyles } from '@material-ui/core'\nimport AddIcon from '@material-ui/icons/Add';\nimport RemoveIcon from '@material-ui/icons/Remove';\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\nimport StopIcon from '@material-ui/icons/Stop';\nimport PauseIcon from '@material-ui/icons/Pause';\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport 'fontsource-roboto'\nimport Time from './Time';\n\nconst SoundPlayer: React.FC = () => {\n  const [correctSound] = React.useState(new Audio(\"https://raw.githubusercontent.com/shuto410/5BomberTimer/master/audio/correct.mp3\"));\n  const [wrongSound] = React.useState(new Audio(\"https://raw.githubusercontent.com/shuto410/5BomberTimer/master/audio/wrong.mp3\"));\n  useEffect(() => {\n    document.body.addEventListener('keydown',\n      (event) => {\n        if (event.key === 'c') {\n          correctSound.play();\n        }\n      }\n    );\n    document.body.addEventListener('keydown',\n      (event) => {\n        if (event.key === 'x') {\n          wrongSound.play();\n        }\n      }\n    );\n  }, []);\n  return (\n    <div>\n      <Box mt={3}>\n        <Grid container justify=\"center\">\n          <IconButton onClick={() => correctSound.play()}><RadioButtonUncheckedIcon></RadioButtonUncheckedIcon></IconButton>\n          <IconButton onClick={() => wrongSound.play()}><ClearIcon></ClearIcon></IconButton>\n        </Grid>\n      </Box>\n    </div>\n  );\n\n}\n\nexport default SoundPlayer;\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core'\nimport Timer from './components/Timer';\nimport SoundPlayer from './components/SoundPlayer';\n\nconst useStyles = makeStyles({\n  app: {\n    padding: '2vh',\n  },\n})\n\nconst App: React.FC = () => {\n  const classes = useStyles();\n  return (\n    <div className={classes.app}>\n      <Timer/ >\n      <SoundPlayer/ >\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}