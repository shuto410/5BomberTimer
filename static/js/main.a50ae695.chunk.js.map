{"version":3,"sources":["components/Time.tsx","components/WebSocketConnection.tsx","components/Timer.tsx","components/SoundPlayer.tsx","components/Chat.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Time","props","Typography","align","color","isResetState","variant","seconds","m","Math","floor","s","mStr","toString","sStr","secondsToString","connection","host","socket","WebSocket","this","onMessages","init","newSocket","onopen","console","log","oldSocket","onclose","close","onmessage","event","data","forEach","onMessage","setInterval","push","send","useStyles","makeStyles","redBg","background","whiteBg","Timer","classes","useState","initialSeconds","setInitialSeconds","refInitialSeconds","useRef","remainingSeconds","setRemainingSeconds","refRemainingSeconds","timerId","setTimerId","refTimerId","running","setRunning","startButton","name","stopButton","actionButton","setActionButton","resetButtonIsEnable","setResetButtonIsEnable","setIsResetState","React","Audio","startSound","cannonSound","userId","useContext","TimerContext","refUserId","volume","useEffect","current","play","window","clearInterval","addOnMessage","response","split","startsWith","startTimer","stopTimer","resetTimer","increaseTime","decreaseTime","msg","parseInt","syncTimer","timerMsgPrefix","updateTimer","Grid","container","justify","spacing","item","xs","md","Paper","className","elevation","Box","ml","mt","IconButton","edge","onClick","mr","Button","size","startIcon","disabled","SoundPlayer","correctSound","wrongSound","successSound","soundDict","key","sound","endsWith","document","body","addEventListener","sendCorrectSound","sendWrongSound","sendSuccessSound","msgPrefix","chatform","outline","marginLeft","marginRight","marginTop","padding","display","height","width","border","borderBottom","backgroundColor","BorderRadius","Chat","input","setInput","timeline","setTimeline","refTimeline","date","Date","newId","length","id","time","toLocaleString","sm","Card","type","onKeyDown","e","postFormIsEmpty","shiftKey","submit","value","onChange","target","List","map","post","mb","ListItem","ListItemText","primary","secondary","slice","app","createContext","App","random","setUserId","setVolume","setTimeout","Fingerprint2","getV18","hash","components","Provider","Slider","newValue","aria-labelledby","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4XA2BeA,EAnBmB,SAACC,GAWjC,OACI,kBAACC,EAAA,EAAD,CAAYC,MAAM,SAASC,MAAOH,EAAMI,aAAe,YAAY,UAAWC,QAAQ,MAXlE,SAACC,GACvB,IAAMC,EAAYC,KAAKC,MAAMH,EAAU,IACjCI,EAAYJ,EAAU,GACxBK,EAAeJ,EAAEK,WACjBC,EAAeH,EAAEE,WAGrB,OAFIL,EAAI,KAAII,EAAO,IAAMA,GACrBD,EAAI,KAAIG,EAAO,IAAMA,GAClBF,EAAO,IAAME,EAKdC,CAAgBd,EAAMM,W,gBCwBnBS,EAAa,I,WAtCxB,aAAe,IAAD,gCAJNC,KAAO,iCAID,KAHNC,OAAS,IAAIC,UAAUC,KAAKH,MAGtB,KAFNI,WAAmD,GAE7C,KAONC,KAAO,WACb,IAAMC,EAAY,IAAIJ,UAAU,EAAKF,MACrCM,EAAUC,OAAS,WACjBC,QAAQC,IAAI,WACZ,IAAMC,EAAY,EAAKT,OACvB,EAAKA,OAASK,EACdI,EAAUC,QAAU,aACpBD,EAAUE,SAEZN,EAAUO,UAAY,SAACC,GACrBN,QAAQC,IAAIK,EAAMC,MAClB,EAAKX,WAAWY,SAAQ,SAAAC,GAAS,OAAIA,EAAUH,OAEjDR,EAAUK,QAAU,WAClBH,QAAQC,IAAI,aACZ,EAAKJ,SArBPF,KAAKE,OACLa,aAAY,WACV,EAAKb,SACJ,K,yDAsBeY,GAA2C,IAAD,OAC5Dd,KAAKC,WAAWe,KAAKF,GACrBd,KAAKF,OAAOY,UAAY,SAACC,GACvB,EAAKV,WAAWY,SAAQ,SAAAC,GAAS,OAAIA,EAAUH,S,2BAIvCC,GACVZ,KAAKF,OAAOmB,KAAKL,O,MC7BfM,EAAYC,YAAW,CAC3BC,MAAO,CACLC,WAAY,OAEdC,QAAS,KAoOIC,EA/NS,WACtB,IAAMC,EAAUN,IADY,EAEgBO,mBAAS,IAFzB,mBAErBC,EAFqB,KAELC,EAFK,KAGtBC,EAAoBC,iBAAOH,GAHL,EAIoBD,mBAASC,GAJ7B,mBAIrBI,EAJqB,KAIHC,EAJG,KAKtBC,EAAsBH,iBAAOC,GALP,EAMEL,mBAAS,GANX,mBAMrBQ,EANqB,KAMZC,EANY,KAOtBC,EAAaN,iBAAOI,GAPE,EAQER,oBAAS,GARX,mBAQrBW,EARqB,KAQZC,EARY,KAStBC,EAAc,CAACtD,MAAO,UAAWuD,KAAM,SACvCC,EAAa,CAACxD,MAAO,UAAWuD,KAAM,QAVhB,EAYYd,mBAAuB,CAACzC,MAAO,UAAWuD,KAAM,UAZ5D,mBAYrBE,EAZqB,KAYPC,EAZO,OAa0BjB,oBAAS,GAbnC,mBAarBkB,EAbqB,KAaAC,EAbA,OAcYnB,oBAAS,GAdrB,mBAcrBxC,EAdqB,KAcP4D,EAdO,OAePC,IAAMrB,SAAS,IAAIsB,MAAM,mFAAvCC,EAfqB,sBAgBNF,IAAMrB,SAAS,IAAIsB,MAAM,oFAAxCE,GAhBqB,oBAiBtBC,GAASC,qBAAWC,GAAcF,OAClCG,GAAYxB,iBAAOqB,IACnBI,GAASH,qBAAWC,GAAcE,OAGxCC,qBAAU,WACRvB,EAAoBwB,QAAU1B,EACL,IAArBA,IACFmB,GAAYQ,OACZC,OAAOC,cAAcxB,EAAWqB,YAEjC,CAAC1B,IAEJyB,qBAAU,WACRF,GAAUG,QAAUN,KACnB,CAACA,KAEJK,qBAAU,WACRP,EAAWM,OAAkB,IAATA,GACpBL,GAAYK,OAAkB,IAATA,KACpB,CAACA,KAEJC,qBAAU,WACR3B,EAAkB4B,QAAU9B,IAC3B,CAACA,IAEJ6B,qBAAU,WACRpB,EAAWqB,QAAUvB,IACpB,CAACA,IAEJsB,qBAAU,WACR3D,EAAWgE,cAAa,SAACC,GACvBxD,QAAQC,IAAI,gBACZ,IAAMM,EAAeiD,EAASjD,KAE9B,GADAP,QAAQC,IAAIM,GACRA,EAAKkD,MAAM,KAAK,KAAOT,GAAUG,UACjC5C,EAAKmD,WAAW,gBAClBC,KAEEpD,EAAKmD,WAAW,eAClBE,KAEErD,EAAKmD,WAAW,gBAClBG,KAEEtD,EAAKmD,WAAW,mBAClBI,KAEEvD,EAAKmD,WAAW,mBAClBK,KAEExD,EAAKmD,WAAW,eAAe,CACjC1D,QAAQC,IAAI,sBACZ,IAAM+D,EAAMzD,EAAKkD,MAAM,KAAK,GAC5B/B,EAAoBuC,SAASD,EAAIP,MAAM,KAAK,KAC5CnC,EAAkB2C,SAASD,EAAIP,MAAM,KAAK,KAChB,SAAtBO,EAAIP,MAAM,KAAK,GACjBE,MAGAC,KACIjC,EAAoBwB,UAAY5B,EAAkB4B,QACpDX,GAAgB,GAGhBA,GAAgB,UAKvB,IAEH,IA4BM0B,GAAY,WAChB,IAAMF,EAAc,IAAMrC,EAAoBwB,QAAU,IAAM5B,EAAkB4B,QAAU,IAAMpB,EAAQ3C,WACxGG,EAAWqB,KAAKuD,cAA2BnB,GAAUG,QAAUa,IAG3DL,GAAa,WACjB3D,QAAQC,IAAI,cACZoD,OAAOC,cAAcxB,EAAWqB,SAChCtB,EAAWwB,OAAO3C,YAAY0D,GAAa,MACvCzC,EAAoBwB,UAAY5B,EAAkB4B,SAEpDR,EAAWS,OAEbpB,GAAW,GACXK,EAAgBF,GAChBI,GAAuB,GACvBC,GAAgB,IAGZoB,GAAY,WAChBP,OAAOC,cAAcxB,EAAWqB,SAChCnB,GAAW,GACXK,EAAgBJ,GAChBM,GAAuB,IAGnB6B,GAAc,WACdzC,EAAoBwB,QAAU,GAChCzB,EAAoBC,EAAoBwB,QAAU,IAIhDU,GAAa,WACjBnC,EAAoBH,EAAkB4B,SACtCE,OAAOC,cAAcxB,EAAWqB,SAChCX,GAAgB,IAGZsB,GAAe,WACflF,IACE2C,EAAkB4B,QAAU,KAC9B7B,EAAkB,MAGlBA,EAAkBC,EAAkB4B,QAAU,KAG9CxB,EAAoBwB,QAAU,KAChCzB,EAAoB,MAGtBA,EAAoBC,EAAoBwB,QAAU,KAG9CY,GAAe,WACfnF,IACE2C,EAAkB4B,QAAU,GAC9B7B,EAAkB,GAGlBA,EAAkBC,EAAkB4B,QAAU,KAG9CxB,EAAoBwB,QAAU,GAChCzB,EAAoB,GAGtBA,EAAoBC,EAAoBwB,QAAU,KAGpD,OACE,kBAACkB,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,SAASC,QAAS,GACxC,kBAACH,EAAA,EAAD,CAAMI,MAAI,EAACC,IAAE,EAACC,GAAI,GAChB,kBAACC,EAAA,EAAD,CAAOC,UAAgC,IAArBpD,EAAyBN,EAAQJ,MAAQI,EAAQF,QAAStC,MAAM,UAAUmG,UAAW,GACrG,kBAACT,EAAA,EAAD,CAAMC,WAAS,GACf,kBAACD,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,IACb,kBAACK,EAAA,EAAD,CAAKC,GAAG,OAAM,kBAAC,EAAD,CAAMlG,QAAS2C,EAAkB7C,aAAcA,MAE/D,kBAACyF,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GACb,kBAACL,EAAA,EAAD,CAAMC,WAAS,GACf,kBAACD,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,IACb,kBAACK,EAAA,EAAD,CAAKE,GAAI,GAAG,kBAACC,EAAA,EAAD,CAAYvG,MAAOC,EAAe,YAAY,UAAWuG,KAAK,QAAQC,QAAS,WA3FrGlB,KACAJ,KACAvE,EAAWqB,KAAKuD,kBAA+BnB,GAAUG,WAyF6E,kBAAC,IAAD,SAE9H,kBAACkB,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,IACb,kBAACQ,EAAA,EAAD,CAAYvG,MAAOC,EAAe,YAAY,UAAWuG,KAAK,QAAQC,QAAS,WAzFzFlB,KACAH,KACAxE,EAAWqB,KAAKuD,kBAA+BnB,GAAUG,WAuFiE,kBAAC,IAAD,aAOxH,kBAACkB,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,IACb,kBAACL,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,SAASC,QAAS,GACxC,kBAACO,EAAA,EAAD,CAAKM,GAAG,MAAMJ,GAAG,OACf,kBAACK,EAAA,EAAD,CAAQC,KAAK,QAAQ1G,QAAQ,YAAYF,MAAOyD,EAAazD,MAAO6G,UAAWzD,EAAU,kBAAC,IAAD,MAAa,kBAAC,IAAD,MAAkBqD,QAAS,WAzHzIlB,KACInC,GACF6B,KACArE,EAAWqB,KAAKuD,cAA2BnB,GAAUG,WAGrDQ,KACApE,EAAWqB,KAAKuD,eAA4BnB,GAAUG,YAkH4Gf,EAAaF,OAE3K,kBAAC6C,EAAA,EAAD,CAAKC,GAAG,MAAMC,GAAG,OACf,kBAACK,EAAA,EAAD,CAAQC,KAAK,QAAQ1G,QAAQ,YAAYF,MAAM,YAAY6G,UAAW,kBAAC,IAAD,MAAaC,UAAUnD,EAAoC8C,QAAS,WAhHlJlB,KACAL,KACAtE,EAAWqB,KAAKuD,eAA4BnB,GAAUG,WA8G9C,c,qFChJGuC,EAlFe,WAAO,IAAD,EACXjD,IAAMrB,SAAS,IAAIsB,MAAM,qFAAzCiD,EAD2B,sBAEblD,IAAMrB,SAAS,IAAIsB,MAAM,mFAAvCkD,EAF2B,sBAGXnD,IAAMrB,SAAS,IAAIsB,MAAM,qFAAzCmD,EAH2B,oBAI5BC,EAA2D,CAC/D,CAAEC,IAAK,UAAWC,MAAOL,GACzB,CAAEI,IAAK,QAAWC,MAAOJ,GACzB,CAAEG,IAAK,UAAWC,MAAOH,IAGrBhD,EAASC,qBAAWC,GAAcF,OAClCG,EAAYxB,iBAAOqB,GACnBI,EAASH,qBAAWC,GAAcE,OAExCC,qBAAU,WACRF,EAAUG,QAAUN,IACnB,CAACA,IAEJK,qBAAU,WACRyC,EAAa1C,OAAkB,IAATA,EACtB2C,EAAW3C,OAAkB,IAATA,EACpB4C,EAAa5C,OAAkB,IAATA,IACrB,CAACA,IAEJC,qBAAU,WACR3D,EAAWgE,cAAa,SAACC,GACvB,IAAMQ,EAAcR,EAASjD,KAC7BuF,EAAUtF,SAAQ,SAAAiE,GACZT,EAAIN,WAnBI,SAmBmBe,EAAKsB,OAC7B/B,EAAIiC,SAASjD,EAAUG,UAC1BsB,EAAKuB,MAAM5C,iBAOrBF,qBAAU,WACRgD,SAASC,KAAKC,iBAAiB,WAC7B,SAAC9F,GACmB,MAAdA,EAAMyF,MACRJ,EAAavC,OACbiD,KAEgB,MAAd/F,EAAMyF,MACRH,EAAWxC,OACXkD,KAEgB,MAAdhG,EAAMyF,MACRF,EAAazC,OACbmD,UAIL,IAEH,IAAMF,EAAmB,WACvB9G,EAAWqB,KAAK4F,iBAAyBxD,EAAUG,UAG/CmD,EAAiB,WACrB/G,EAAWqB,KAAK4F,eAAuBxD,EAAUG,UAG7CoD,EAAmB,WACvBhH,EAAWqB,KAAK4F,iBAAyBxD,EAAUG,UAGrD,OACE,6BACE,kBAAC4B,EAAA,EAAD,CAAKE,GAAI,GACP,kBAACZ,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,UACtB,kBAACW,EAAA,EAAD,CAAYE,QAAS,WAAOO,EAAavC,OAAOiD,MAAqB,kBAAC,IAAD,OACrE,kBAACnB,EAAA,EAAD,CAAYE,QAAS,WAAOQ,EAAWxC,OAAOkD,MAAmB,kBAAC,IAAD,OACjE,kBAACpB,EAAA,EAAD,CAAYE,QAAS,WAAOS,EAAazC,OAAOmD,MAAqB,kBAAC,IAAD,W,wCC7EzE1F,EAAYC,YAAW,CAC3B2F,SAAU,CACRC,QAAS,OACTC,WAAY,OACZC,YAAa,OACbC,UAAW,OACXC,QAAS,qBACTC,QAAS,QACTC,OAAQ,OACRC,MAAO,MACPC,OAAQ,OACRC,aAAc,qBACdC,gBAAiB,UACjBC,aAAc,UAqHHC,EAjHQ,WACrB,IAAMnG,EAAUN,IADW,EAGDO,mBAAS,IAHR,mBAGpBmG,EAHoB,KAGbC,EAHa,OAIKpG,mBAAoE,IAJzE,mBAIpBqG,EAJoB,KAIVC,EAJU,KAKrBC,EAAcnG,iBAAOiG,GAErB5E,EAASC,qBAAWC,GAAcF,OAExCK,qBAAU,WACR3D,EAAWgE,cAAa,SAACC,GACvB,IAAMjD,EAAeiD,EAASjD,KAC1ByD,EAAc,GA0BlB,GAxBIzD,EAAKmD,WAAW,mBAClBM,EAAM,aAEJzD,EAAKmD,WAAW,iBAClBM,EAAM,WAEJzD,EAAKmD,WAAW,mBAClBM,EAAM,qBAEJzD,EAAKmD,WAAW,iBAClBM,EAAM,eAEJzD,EAAKmD,WAAW,gBAClBM,EAAM,cAEJzD,EAAKmD,WAAW,iBAClBM,EAAM,eAEJzD,EAAKmD,WAAW,oBAClBM,EAAM,kBAEJzD,EAAKmD,WAAW,oBAClBM,EAAM,mBAEJzD,EAAKmD,WAAW,cAApB,CAIInD,EAAKmD,WApCS,WAqChBM,EAAMzD,EAAKkD,MAAM,KAAK,IAExB,IAAMZ,EAAStC,EAAKkD,MAAM,KAAK,GACzBmE,EAAO,IAAIC,KACXC,EAAgD,IAA/BH,EAAYxE,QAAQ4E,OAAgB,EAAIJ,EAAYxE,QAAQ,GAAG6E,GAAK,EAC3FN,EAAY,CACV,CACEM,GAAIF,EACJG,KAAML,EAAKM,iBACXrF,OAAQA,EACRmB,IAAKA,IALE,mBAON2D,EAAYxE,iBAGlB,IAEHD,qBAAU,WACRyE,EAAYxE,QAAUsE,IACrB,CAACA,IAeJ,OACE,6BACE,kBAACpD,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,YACtB,kBAACF,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,EAAGyD,GAAI,EAAGxD,GAAI,GAC7B,kBAACyD,EAAA,EAAD,CAAMvJ,QAAQ,YACZ,2BACEwJ,KAAK,OACLnG,KAAK,OACL2C,UAAW1D,EAAQsF,SACnB6B,UAAW,SAACC,IAlBP,SAACjI,GACd,IAAMkI,EAA4C,IAAjBjB,EAAMQ,OACrB,UAAdzH,EAAMyF,KAAmBzF,EAAMmI,WAAaD,IAC9CxI,QAAQC,IAAI4C,GACZtD,EAAWqB,KAlEO,QAkEciC,EAAS,IAAO0E,GAChDC,EAAS,KAagBkB,CAAOH,IAC1BI,MAAOpB,EACPqB,SAAU,SAACL,GAvBnBf,EAuB2Ce,EAvB5BM,OAAOF,UAyBhB,kBAACG,EAAA,EAAD,KAEIrB,EAASsB,KAAI,SAAAC,GAAI,OACf,kBAACjE,EAAA,EAAD,CAAKE,IAAK,EAAGgE,IAAK,EAAGlD,IAAKiD,EAAKhB,IAC7B,kBAACkB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAcC,QAASJ,EAAKhF,IAAKqF,UAAWL,EAAKf,KAAO,OAASe,EAAKnG,OAAOyG,MAAM,EAAE,UAK7F,kBAACvE,EAAA,EAAD,CAAKE,IAAK,EAAGgE,IAAK,GAChB,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAcC,QAAQ,8B,iBCpHhCvI,EAAYC,YAAW,CAC3ByI,IAAK,CACHzC,QAAS,SAIA/D,EAAeyG,wBAAc,CACxC3G,OAAQ,IACRI,OAAQ,KA6CKwG,GA1CO,WACpB,IAAMtI,EAAUN,IADU,EAEEO,mBAASpC,KAAK0K,SAAStK,YAFzB,mBAEnByD,EAFmB,KAEX8G,EAFW,OAGEvI,mBAAS,IAHX,mBAGnB6B,EAHmB,KAGX2G,EAHW,KAK1B1G,qBAAU,WACR2G,YAAW,WACTC,IAAaC,QAAO,SAACC,EAAMC,GACzBN,EAAUK,QAEX,OACF,IAOH,OACE,yBAAKnF,UAAW1D,EAAQoI,KACtB,kBAACxG,EAAamH,SAAd,CAAuBvB,MAAO,CAAC9F,OAAQA,EAAQI,OAAQA,IACrD,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC8B,EAAA,EAAD,CAAKE,GAAI,EAAGgE,GAAI,GACd,kBAAC5E,EAAA,EAAD,CAAMC,WAAS,EAACE,QAAS,EAAGD,QAAQ,UAClC,kBAACF,EAAA,EAAD,CAAMI,MAAI,GACR,kBAAC,IAAD,OAEF,kBAACJ,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GACb,kBAACyF,EAAA,EAAD,CAAQxB,MAAO1F,EAAQ2F,SAhBd,SAACtI,EAAY8J,GAChCR,EAAUQ,GACVpK,QAAQC,IAAIgD,IAc6CoH,kBAAgB,uBAEjE,kBAAChG,EAAA,EAAD,CAAMI,MAAI,GACR,kBAAC,IAAD,SAIN,kBAAC,EAAD,SC5CY6F,QACW,cAA7BjH,OAAOkH,SAASC,UAEe,UAA7BnH,OAAOkH,SAASC,UAEhBnH,OAAOkH,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,GAAD,OAEF1E,SAAS2E,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrL,QAAQqL,MAAMA,EAAMC,c","file":"static/js/main.a50ae695.chunk.js","sourcesContent":["import React from 'react';\nimport { Paper, Typography } from '@material-ui/core'\nimport 'fontsource-roboto'\n\ntype TimeProps = {\n  seconds: number;    \n  isResetState: boolean;\n}\nconst Time: React.FC<TimeProps> = (props) => {\n  const secondsToString = (seconds: number): string => {\n    const m: number = Math.floor(seconds / 60);\n    const s: number = seconds % 60;\n    let mStr: string = m.toString();\n    let sStr: string = s.toString();\n    if (m < 10) mStr = '0' + mStr;\n    if (s < 10) sStr = '0' + sStr;\n    return mStr + ':' + sStr;\n  }\n\n  return (\n      <Typography align=\"center\" color={props.isResetState ? \"secondary\":\"primary\"} variant=\"h1\">\n        { secondsToString(props.seconds) }\n      </Typography>\n  );\n\n}\n\nexport default Time;","\n\nclass WebSocketConnection {\n  private host = 'wss://fivebomber.herokuapp.com';\n  private socket = new WebSocket(this.host);\n  private onMessages: Array<(event: MessageEvent) => void> = [];\n\n  constructor() {\n    this.init();\n    setInterval(() => {\n      this.init();\n    }, 20000)\n  }\n\n  private init = () => {\n    const newSocket = new WebSocket(this.host);\n    newSocket.onopen = () => {\n      console.log(\"open!!!\");\n      const oldSocket = this.socket;\n      this.socket = newSocket;\n      oldSocket.onclose = () => undefined;\n      oldSocket.close();\n    }\n    newSocket.onmessage = (event) => {\n      console.log(event.data);\n      this.onMessages.forEach(onMessage => onMessage(event));\n    };\n    newSocket.onclose = () => {\n      console.log(\"closed!!!\");\n      this.init();\n    }\n  }\n\n  public addOnMessage(onMessage: (event: MessageEvent) => void) {\n    this.onMessages.push(onMessage);\n    this.socket.onmessage = (event) => {\n      this.onMessages.forEach(onMessage => onMessage(event));\n    };\n  }\n\n  public send(data: string): void {\n    this.socket.send(data);\n  }\n}\n\nexport const connection = new WebSocketConnection();","import React, { useState, useEffect, useRef, useContext } from 'react';\nimport { Button, Grid, IconButton, Paper, Box, makeStyles } from '@material-ui/core'\nimport AddIcon from '@material-ui/icons/Add';\nimport RemoveIcon from '@material-ui/icons/Remove';\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\nimport StopIcon from '@material-ui/icons/Stop';\nimport PauseIcon from '@material-ui/icons/Pause';\nimport 'fontsource-roboto'\nimport Time from './Time';\nimport { connection } from './WebSocketConnection';\nimport { TimerContext } from '../App';\n\nconst useStyles = makeStyles({\n  redBg: {\n    background: 'red',\n  },\n  whiteBg: {\n  },\n})\n\n\nconst Timer: React.FC = () => {\n  const classes = useStyles();\n  const [initialSeconds, setInitialSeconds] = useState(90)\n  const refInitialSeconds = useRef(initialSeconds);\n  const [remainingSeconds, setRemainingSeconds] = useState(initialSeconds);\n  const refRemainingSeconds = useRef(remainingSeconds);\n  const [timerId, setTimerId] = useState(0);\n  const refTimerId = useRef(timerId);\n  const [running, setRunning] = useState(false);\n  const startButton = {color: 'primary', name: 'start'} as const;\n  const stopButton = {color: 'default', name: 'stop'} as const;\n  type ActionButton = typeof stopButton | typeof startButton;\n  const [actionButton, setActionButton] = useState<ActionButton>({color: 'primary', name: 'start'})\n  const [resetButtonIsEnable, setResetButtonIsEnable] = useState(true);\n  const [isResetState, setIsResetState] = useState(true);\n  const [startSound] = React.useState(new Audio(\"https://raw.githubusercontent.com/shuto410/5BomberTimer/master/audio/start.mp3\"));\n  const [cannonSound] = React.useState(new Audio(\"https://raw.githubusercontent.com/shuto410/5BomberTimer/master/audio/cannon.mp3\"));\n  const userId = useContext(TimerContext).userId;\n  const refUserId = useRef(userId)\n  const volume = useContext(TimerContext).volume;\n  const timerMsgPrefix = 'timer-';\n\n  useEffect(() => {\n    refRemainingSeconds.current = remainingSeconds;\n    if (remainingSeconds === 0) {\n      cannonSound.play();\n      window.clearInterval(refTimerId.current);\n    }\n  }, [remainingSeconds]);\n\n  useEffect(() => {\n    refUserId.current = userId;\n  }, [userId])\n\n  useEffect(() => {\n    startSound.volume = volume * 0.01;\n    cannonSound.volume = volume * 0.01;\n  }, [volume])\n\n  useEffect(() => {\n    refInitialSeconds.current = initialSeconds;\n  }, [initialSeconds])\n\n  useEffect(() => {\n    refTimerId.current = timerId;\n  }, [timerId])\n\n  useEffect(() => {\n    connection.addOnMessage((response) => {\n      console.log(\"addOnMessage\")\n      const data: string = response.data;\n      console.log(data)\n      if (data.split(':')[1] === refUserId.current) return;\n      if (data.startsWith('timer-start')) {\n        startTimer();\n      }\n      if (data.startsWith('timer-stop')) {\n        stopTimer();\n      }\n      if (data.startsWith('timer-reset')) {\n        resetTimer();\n      }\n      if (data.startsWith('timer-increase')) {\n        increaseTime();\n      }\n      if (data.startsWith('timer-decrease')) {\n        decreaseTime();\n      }\n      if (data.startsWith('timer-sync')) {\n        console.log('recieve timer sync');\n        const msg = data.split(':')[2];\n        setRemainingSeconds(parseInt(msg.split('-')[0]))\n        setInitialSeconds(parseInt(msg.split('-')[1]))\n        if (msg.split('-')[2] === 'true') {\n          startTimer();\n        }\n        else {\n          stopTimer();\n          if (refRemainingSeconds.current === refInitialSeconds.current) {\n            setIsResetState(true);\n          }\n          else {\n            setIsResetState(false);\n          }\n        }\n      }\n    })\n  }, [])\n\n  const onActionButton = () => {\n    syncTimer();\n    if (running) {\n      stopTimer();\n      connection.send(timerMsgPrefix + 'stop:' + refUserId.current);\n    }\n    else {\n      startTimer();\n      connection.send(timerMsgPrefix + 'start:' + refUserId.current);\n    }\n  }\n\n  const onClickResetButton  = () => {\n    syncTimer();\n    resetTimer();\n    connection.send(timerMsgPrefix + 'reset:' + refUserId.current);\n  }\n  const onClickIncreaseButton  = () => {\n    syncTimer();\n    increaseTime();\n    connection.send(timerMsgPrefix + 'increase:' + refUserId.current);\n  }\n  const onClickDecreaseButton  = () => {\n    syncTimer();\n    decreaseTime();\n    connection.send(timerMsgPrefix + 'decrease:' + refUserId.current);\n  }\n\n  const syncTimer = () => {\n    const msg: string = ':' + refRemainingSeconds.current + '-' + refInitialSeconds.current + '-' + running.toString();\n    connection.send(timerMsgPrefix + 'sync:' + refUserId.current + msg);\n  }\n\n  const startTimer = () => {\n    console.log(\"startTimer\");\n    window.clearInterval(refTimerId.current);\n    setTimerId(window.setInterval(updateTimer, 1000));\n    if (refRemainingSeconds.current === refInitialSeconds.current) {\n      // console.log(\"remainingSeconds\" + remainingSeconds)\n      startSound.play();\n    }\n    setRunning(true);\n    setActionButton(stopButton);\n    setResetButtonIsEnable(false);\n    setIsResetState(false);\n  }\n\n  const stopTimer = () => {\n    window.clearInterval(refTimerId.current);\n    setRunning(false);\n    setActionButton(startButton);\n    setResetButtonIsEnable(true);\n  }\n\n  const updateTimer = () => {\n    if (refRemainingSeconds.current > 0) {\n      setRemainingSeconds(refRemainingSeconds.current - 1);\n    }\n  }\n\n  const resetTimer = () => {\n    setRemainingSeconds(refInitialSeconds.current);\n    window.clearInterval(refTimerId.current);\n    setIsResetState(true);\n  }\n\n  const increaseTime = () => {\n    if (isResetState) {\n      if (refInitialSeconds.current > 3570) {\n        setInitialSeconds(3599);\n      }\n      else {\n        setInitialSeconds(refInitialSeconds.current + 30);\n      }\n    }\n    if (refRemainingSeconds.current > 3570) {\n      setRemainingSeconds(3599);\n      return;\n    }\n    setRemainingSeconds(refRemainingSeconds.current + 30);\n  }\n\n  const decreaseTime = () => {\n    if (isResetState) {\n      if (refInitialSeconds.current < 30) {\n        setInitialSeconds(0);\n      }\n      else {\n        setInitialSeconds(refInitialSeconds.current - 30)\n      }\n    }\n    if (refRemainingSeconds.current < 30) {\n      setRemainingSeconds(0);\n      return;\n    }\n    setRemainingSeconds(refRemainingSeconds.current - 30);\n  }\n\n  return (\n    <Grid container justify=\"center\" spacing={2}>\n      <Grid item xs md={5}>\n        <Paper className={remainingSeconds === 0 ? classes.redBg : classes.whiteBg} color=\"primary\" elevation={4}>\n          <Grid container>\n          <Grid item xs={11}>\n            <Box ml=\"5vw\"><Time seconds={remainingSeconds} isResetState={isResetState}/ ></Box>\n          </Grid>\n          <Grid item xs={1}>\n            <Grid container>\n            <Grid item xs={12}>\n              <Box mt={1}><IconButton color={isResetState ? \"secondary\":\"primary\"} edge='start' onClick={() => {onClickIncreaseButton()}}><AddIcon></AddIcon></IconButton></Box>\n            </Grid>\n            <Grid item xs={12}>\n              <IconButton color={isResetState ? \"secondary\":\"primary\"} edge='start' onClick={() => {onClickDecreaseButton()}}><RemoveIcon></RemoveIcon></IconButton>\n            </Grid>\n            </Grid>\n          </Grid>\n          </Grid>\n        </Paper>\n      </Grid>\n      <Grid item xs={12}>\n        <Grid container justify=\"center\" spacing={2}>\n          <Box mr=\"1vw\" mt=\"3vh\">\n            <Button size=\"large\" variant=\"contained\" color={actionButton.color} startIcon={running ? <PauseIcon/>:<PlayArrowIcon/>} onClick={() => {onActionButton()}}>{actionButton.name}</Button>\n          </Box>\n          <Box ml=\"1vw\" mt=\"3vh\">\n            <Button size=\"large\" variant=\"contained\" color=\"secondary\" startIcon={<StopIcon/>} disabled={resetButtonIsEnable ? false : true} onClick={() => {onClickResetButton()}}>Reset</Button>\n          </Box>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n\n}\n\nexport default Timer;","import React, { useEffect, useState, useContext, useRef } from 'react';\nimport { Grid, IconButton, Box, Slider } from '@material-ui/core'\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport NotificationsActiveIcon from '@material-ui/icons/NotificationsActive';\nimport 'fontsource-roboto'\nimport { connection } from './WebSocketConnection';\nimport { TimerContext } from '../App';\n\nconst SoundPlayer: React.FC = () => {\n  const [correctSound] = React.useState(new Audio(\"https://raw.githubusercontent.com/shuto410/5BomberTimer/master/audio/correct.mp3\"));\n  const [wrongSound] = React.useState(new Audio(\"https://raw.githubusercontent.com/shuto410/5BomberTimer/master/audio/wrong.mp3\"));\n  const [successSound] = React.useState(new Audio(\"https://raw.githubusercontent.com/shuto410/5BomberTimer/master/audio/success.mp3\"));\n  const soundDict: Array<{key: string, sound: HTMLAudioElement}> = [\n    { key: 'correct', sound: correctSound },\n    { key: 'wrong',   sound: wrongSound },\n    { key: 'success', sound: successSound },\n  ];\n  const msgPrefix = 'sound-';\n  const userId = useContext(TimerContext).userId;\n  const refUserId = useRef(userId)\n  const volume = useContext(TimerContext).volume;\n\n  useEffect(() => {\n    refUserId.current = userId;\n  }, [userId])\n\n  useEffect(() => {\n    correctSound.volume = volume * 0.01;\n    wrongSound.volume = volume * 0.01;\n    successSound.volume = volume * 0.01;\n  }, [volume])\n\n  useEffect(() => {\n    connection.addOnMessage((response) => {\n      const msg: string = response.data;\n      soundDict.forEach(item => {\n        if (msg.startsWith(msgPrefix + item.key)) {\n          if (!msg.endsWith(refUserId.current)) {\n            item.sound.play();\n          }\n        }\n      })\n    });\n  })\n\n  useEffect(() => {\n    document.body.addEventListener('keydown',\n      (event) => {\n        if (event.key === ',') {\n          correctSound.play();\n          sendCorrectSound();\n        }\n        if (event.key === '.') {\n          wrongSound.play();\n          sendWrongSound();\n        }\n        if (event.key === '/') {\n          successSound.play();\n          sendSuccessSound();\n        }\n      }\n    );\n  }, []);\n\n  const sendCorrectSound = () => {\n    connection.send(msgPrefix + 'correct:' + refUserId.current);\n  }\n\n  const sendWrongSound = () => {\n    connection.send(msgPrefix + 'wrong:' + refUserId.current);\n  }\n\n  const sendSuccessSound = () => {\n    connection.send(msgPrefix + 'success:' + refUserId.current);\n  }\n\n  return (\n    <div>\n      <Box mt={3}>\n        <Grid container justify=\"center\">\n          <IconButton onClick={() => {correctSound.play();sendCorrectSound()}}><RadioButtonUncheckedIcon></RadioButtonUncheckedIcon></IconButton>\n          <IconButton onClick={() => {wrongSound.play();sendWrongSound()}}><ClearIcon></ClearIcon></IconButton>\n          <IconButton onClick={() => {successSound.play();sendSuccessSound()}}><NotificationsActiveIcon></NotificationsActiveIcon></IconButton>\n        </Grid>\n      </Box>\n    </div>\n  );\n\n}\n\nexport default SoundPlayer;\n","import React, { useState, useRef, useEffect, KeyboardEvent, useContext } from 'react';\nimport { Button, TextField, TextFieldProps, List, ListItem, ListItemText, Box, Divider, Paper, Card, makeStyles, Grid } from '@material-ui/core'\nimport 'fontsource-roboto'\nimport { connection } from './WebSocketConnection';\nimport { TimerContext } from '../App';\n\nconst useStyles = makeStyles({\n  chatform: {\n    outline: 'none',\n    marginLeft: \"10px\",\n    marginRight: \"10px\",\n    marginTop: \"10px\",\n    padding: \"10px 10px 10px 5px\",\n    display: \"block\",\n    height: \"10px\",\n    width: \"85%\",\n    border: \"none\",\n    borderBottom: \"1px solid #757575 \",\n    backgroundColor: \"#f4f4f4\",\n    BorderRadius: \"30px\"\n  },\n});\n\nconst Chat: React.FC = () => {\n  const classes = useStyles();\n  // const input = useRef<TextFieldProps | null>(null);\n  const [input, setInput] = useState(\"\");\n  const [timeline, setTimeline] = useState<{id: number, time: string, userId: string, msg: string}[]>([]);\n  const refTimeline = useRef(timeline);\n  const chatMsgPrefix = 'chat:';\n  const userId = useContext(TimerContext).userId;\n\n  useEffect(() => {\n    connection.addOnMessage((response) => {\n      const data: string = response.data;\n      let msg: string = '';\n      // sound-{type}:{userid}\n      if (data.startsWith('sound-correct')) {\n        msg = 'Correct!!'\n      }\n      if (data.startsWith('sound-wrong')) {\n        msg = 'Wrong!!'\n      }\n      if (data.startsWith('sound-success')) {\n        msg = 'Congratulations!!'\n      }\n      if (data.startsWith('timer-start')) {\n        msg = 'Timer Start'\n      }\n      if (data.startsWith('timer-stop')) {\n        msg = 'Timer Stop'\n      }\n      if (data.startsWith('timer-reset')) {\n        msg = 'Timer Reset'\n      }\n      if (data.startsWith('timer-increase')) {\n        msg = 'Timer Increase'\n      }\n      if (data.startsWith('timer-decrease')) {\n        msg = 'Timer Decrease'\n      }\n      if (data.startsWith('timer-sync')) {\n        return;\n      }\n      // chat:{userid}:{msg}\n      if (data.startsWith(chatMsgPrefix)) {\n        msg = data.split(':')[2];\n      }\n      const userId = data.split(':')[1];\n      const date = new Date();\n      const newId: number = (refTimeline.current.length === 0) ? 0 : refTimeline.current[0].id + 1;\n      setTimeline([\n        {\n          id: newId,\n          time: date.toLocaleString(),\n          userId: userId,\n          msg: msg\n        },\n        ...refTimeline.current,\n      ])\n    })\n  }, [])\n\n  useEffect(() => {\n    refTimeline.current = timeline;\n  }, [timeline])\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setInput(event.target.value);\n  }\n\n  const submit = (event: KeyboardEvent) => {\n    const postFormIsEmpty: boolean = input.length === 0;\n    if (event.key === 'Enter' && event.shiftKey && !postFormIsEmpty) {\n      console.log(userId);\n      connection.send(chatMsgPrefix + userId + ':' +  input);\n      setInput(\"\");\n    }\n  }\n\n  return (\n    <div>\n      <Grid container justify=\"flex-end\">\n        <Grid item xs={8} sm={5} md={3}>\n        <Card variant=\"outlined\">\n          <input\n            type=\"text\"\n            name=\"Post\"\n            className={classes.chatform}\n            onKeyDown={(e) => {submit(e)}}\n            value={input}\n            onChange={(e) => handleInputChange(e)}\n          ></input>\n          <List>\n            {\n              timeline.map(post => (\n                <Box mt={-1} mb={-2} key={post.id}>\n                  <ListItem >\n                    <ListItemText primary={post.msg} secondary={post.time + \" ID:\" + post.userId.slice(0,6)} />\n                  </ListItem>\n                </Box>\n              ))\n            }\n            <Box mt={-1} mb={-2}>\n              <ListItem >\n                <ListItemText primary=\"Press Shift+Enter\" />\n              </ListItem>\n            </Box>\n          </List>\n        </Card>\n        </Grid>\n        </Grid>\n    </div>\n  );\n}\n\nexport default Chat;","import React, { useState, useEffect, createContext, useRef } from 'react';\nimport { makeStyles, Grid, Slider, Box } from '@material-ui/core'\nimport Timer from './components/Timer';\nimport VolumeUp from '@material-ui/icons/VolumeUp';\nimport VolumeDown from '@material-ui/icons/VolumeDown';\nimport SoundPlayer from './components/SoundPlayer';\nimport Chat from './components/Chat';\nimport Fingerprint2 from 'fingerprintjs2';\n\nconst useStyles = makeStyles({\n  app: {\n    padding: '2vh',\n  },\n})\n\nexport const TimerContext = createContext({\n  userId: '0',\n  volume: 50,\n});\n\nconst App: React.FC = () => {\n  const classes = useStyles();\n  const [userId, setUserId] = useState(Math.random().toString());\n  const [volume, setVolume] = useState(50);\n\n  useEffect(() => {\n    setTimeout(() => {\n      Fingerprint2.getV18((hash, components) => {\n        setUserId(hash);\n      })\n    }, 500)\n  }, [])\n\n  const volumeChange = (event: any, newValue: number | number[]) => {\n    setVolume(newValue as number);\n    console.log(volume);\n  }\n\n  return (\n    <div className={classes.app}>\n      <TimerContext.Provider value={{userId: userId, volume: volume}}>\n        <Timer/ >\n        <SoundPlayer/ >\n        <Box mt={0} mb={0}>\n          <Grid container spacing={2} justify=\"center\">\n            <Grid item>\n              <VolumeDown />\n            </Grid>\n            <Grid item xs={3}>\n              <Slider value={volume} onChange={volumeChange} aria-labelledby=\"continuous-slider\" />\n            </Grid>\n            <Grid item>\n              <VolumeUp />\n            </Grid>\n          </Grid>\n        </Box>\n        <Chat/ >\n      </TimerContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}